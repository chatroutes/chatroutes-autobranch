"""
Hybrid conversation analysis combining explicit and semantic branch detection.

This example demonstrates how to:
1. Parse conversations into turns
2. Detect explicit branches (marked with BRANCH:, OPTIONS:, etc.)
3. Detect semantic branches (topic shifts, decision points)
4. Combine both into a unified view
"""

from chatroutes_autobranch.branch_detection.conversation_analyzer import (
    ConversationFlowAnalyzer,
    ConversationTurn,
)
from chatroutes_autobranch.core.embeddings import DummyEmbeddingProvider


# Your original conversation, structured as turns
conversation_turns = [
    ConversationTurn(
        id="1",
        speaker="user",
        content="currently llm search web to gather facts and details. with the growing number of llm users what if people stop creating those websites. how will llm find details about new things ideas etc.",
    ),
    ConversationTurn(
        id="2",
        speaker="user",
        content="most of the content these days is being generated by llm, so we are loosing humans in this loop. humans are no longer incetivised to create own information, they use llm",
    ),
    ConversationTurn(
        id="3",
        speaker="user",
        content="challenged is how to verify if a content is purely and honestly created by humans",
    ),
    ConversationTurn(
        id="4",
        speaker="assistant",
        content="Philosophical Layer: What counts as human? spectrum of authorship: Human-origin, Human + AI co-creation, AI-origin",
    ),
    ConversationTurn(
        id="5",
        speaker="user",
        content="yes i would like to know more about the origin and research around it",
    ),
    ConversationTurn(
        id="6",
        speaker="user",
        content="yes i would like to write an article based on the available credible research on this topic and especially ideas how can humans keep their value.",
    ),
    ConversationTurn(
        id="7",
        speaker="user",
        content='here is my rough draft: "With all the hype of Gen AI these days and reading daily about many layoffs or restructuring many of us are wondering what is our future?"',
    ),
    ConversationTurn(
        id="8",
        speaker="user",
        content="i want to add historical references, studies, graphs and show some examples from past where machines enabled humans to get better at things.",
    ),
    ConversationTurn(
        id="9",
        speaker="user",
        content="so if you are typical office worker who creates reports, spreadsheets, budgets and you have analytical skills today to certain job what should he do.",
    ),
    ConversationTurn(
        id="10",
        speaker="user",
        content="how this wave of labor changed from farmlands to factories to officies",
    ),
    ConversationTurn(
        id="11",
        speaker="user",
        content="so let's take some examples of some concrete roles and see how those people should change for future",
    ),
    ConversationTurn(
        id="12",
        speaker="user",
        content="lets focus on those traditioanal roles of accountant, lawyer, doctors etc. should they still study what they study today",
    ),
    ConversationTurn(
        id="13",
        speaker="user",
        content="ok now i am thinking to divide this into multiple articles and start with the definition of creativity, human creativity, meaning of work, creation of value and how value creation is changing.",
    ),
    ConversationTurn(
        id="14",
        speaker="user",
        content="What should write for part 1. I need to back my words with different writers book, trusted data source. Article shows the breadth and width from different angles.",
    ),
]


# Example showing how to add EXPLICIT branches to conversation
conversation_with_explicit = conversation_turns.copy()
conversation_with_explicit.insert(
    7,
    ConversationTurn(
        id="7a",
        speaker="user",
        content="""BRANCH: Article Approach
What direction should the article take?

OPTIONS:
1. Philosophical - Focus on meaning, human value, authorship spectrum
2. Practical - Focus on specific professions, actionable advice, skills
3. Historical - Focus on past labor transitions, patterns, predictions
""",
    ),
)


def print_section(title: str):
    """Print section header."""
    print("\n" + "=" * 80)
    print(title)
    print("=" * 80)


def main():
    print_section("HYBRID CONVERSATION FLOW ANALYSIS")

    # Create analyzer with embeddings for semantic detection
    embedding_provider = DummyEmbeddingProvider(
        dimension=384, seed=42
    )  # Use dummy for demo

    analyzer = ConversationFlowAnalyzer(
        embedding_provider=embedding_provider,
        topic_shift_threshold=0.6,  # Detect topic shifts when similarity < 0.6
        enable_explicit=True,
        enable_semantic=True,
    )

    print("\nAnalyzing conversation with SEMANTIC DETECTION ONLY...")
    print("(No explicit branches marked)")

    # Analyze original conversation (no explicit branches)
    results = analyzer.analyze(conversation_turns)

    print_section("SEMANTIC BRANCHES DETECTED")
    print(f"\nFound {len(results['semantic_branches'])} semantic branches:\n")

    for i, branch in enumerate(results["semantic_branches"], 1):
        print(f"{i}. [{branch.branch_type.upper()}] at turn {branch.turn_id}")
        print(f"   Description: {branch.description}")
        print(f"   Confidence: {branch.confidence:.2f}")
        print(f"   Context before: {branch.context_before[:80]}...")
        print(f"   Context after: {branch.context_after[:80]}...")
        print()

    print_section("STATISTICS")
    stats = results["statistics"]
    print(f"\nTotal branches: {stats['total_branches']}")
    print(f"  - Explicit: {stats['explicit_count']}")
    print(f"  - Semantic: {stats['semantic_count']}")
    if stats["semantic_types"]:
        print(f"\nSemantic branch types:")
        for btype, count in stats["semantic_types"].items():
            print(f"  - {btype}: {count}")
    print(f"\nAvg semantic confidence: {stats['avg_semantic_confidence']:.2f}")

    # Now analyze conversation WITH explicit branches
    print("\n" + "=" * 80)
    print("NOW ADDING EXPLICIT BRANCH MARKER...")
    print("=" * 80)
    print("\nAdding explicit BRANCH marker at turn 7a:")
    print(conversation_with_explicit[7].content)

    results_hybrid = analyzer.analyze(conversation_with_explicit)

    print_section("EXPLICIT BRANCHES DETECTED")
    print(f"\nFound {len(results_hybrid['explicit_branches'])} explicit branches:\n")

    for i, branch in enumerate(results_hybrid["explicit_branches"], 1):
        print(f"{i}. {branch.type.upper()} (ID: {branch.id})")
        print(f"   Options ({branch.option_count}):")
        for opt in branch.options:
            print(f"     - {opt.label}")
        print(f"   Confidence: {branch.meta.get('confidence', 'N/A')}")
        print(f"   Turn: {branch.meta.get('turn_id', 'N/A')}")
        print()

    print_section("HYBRID STATISTICS")
    hybrid_stats = results_hybrid["statistics"]
    print(f"\nTotal branches: {hybrid_stats['total_branches']}")
    print(f"  - Explicit: {hybrid_stats['explicit_count']} (1.0 confidence)")
    print(f"  - Semantic: {hybrid_stats['semantic_count']} ({hybrid_stats['avg_semantic_confidence']:.2f} avg confidence)")
    print(f"\nExplicit options available: {hybrid_stats['explicit_options']}")

    print_section("COMBINED GRAPH")
    graph = results_hybrid["combined_graph"]
    print(f"\nGraph nodes: {len(graph['nodes'])}")
    print(f"Graph edges: {len(graph['edges'])}")
    print("\nNode types:")
    node_types = {}
    for node in graph["nodes"]:
        ntype = node["type"]
        node_types[ntype] = node_types.get(ntype, 0) + 1
    for ntype, count in sorted(node_types.items()):
        print(f"  - {ntype}: {count}")

    print_section("USAGE RECOMMENDATION")
    print("""
The hybrid approach gives you:

1. EXPLICIT BRANCHES (when you mark them):
   - 100% confidence
   - Clear, actionable options
   - Perfect for decision points you know about

   Usage: Add markers in your conversation:
   ```
   BRANCH: Title
   OPTIONS:
   1. Option A
   2. Option B
   ```

2. SEMANTIC BRANCHES (automatically detected):
   - Topic shifts (similarity-based)
   - Decision points (pattern-based)
   - Question-to-action transitions
   - Variable confidence (0-1)

   Usage: Just talk naturally, analyzer detects shifts

3. COMBINED VIEW:
   - Unified graph of conversation flow
   - Mix deterministic + AI-powered detection
   - Best of both worlds

NEXT STEPS:
- Use explicit markers for important decision points
- Let semantic detection find hidden branches
- Combine both for complete conversation map
""")

    print("\n" + "=" * 80)


if __name__ == "__main__":
    main()
